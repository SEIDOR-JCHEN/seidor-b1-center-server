// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        BigInt   @id @default(autoincrement())
  name      String
  nif       String
  scopeName  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  users UserOrgRoles[]
  apps  OrganizationApps[]
  invites InviteUser[]
}


model App {
  id        BigInt   @id @default(autoincrement())
  name      String
  description String
  image    String
  internal  Boolean   @default(true)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orgs  OrganizationApps[]
}

model OrganizationApps {
  orgId BigInt
  appId BigInt
  active Boolean @default(true)
  dbName String
  dbUser String
  dbPassword String
  slUrl String
  slSessionId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  org Organization @relation(fields: [orgId], references: [id])
  app App @relation(fields: [appId], references: [id])
  users UserOrgApps[]

  @@id([orgId, appId])
}

model Mantainers {
  id        BigInt   @id @default(autoincrement())
  name      String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id        BigInt   @id @default(autoincrement())
  email     String    @unique
  name      String?   
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orgRoles UserOrgRoles[]
  orgApps UserOrgApps[]
}

model Role{
  id        BigInt   @id @default(autoincrement())
  name      String
  description String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orgUsers UserOrgRoles[]
  invites InviteUser[]
}

model UserOrgRoles{
  userId BigInt
  orgId BigInt
  roleId BigInt
  valid Boolean @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  org Organization @relation(fields: [orgId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([userId, orgId, roleId])
}
model UserOrgApps{
  // id        BigInt   @id @default(autoincrement())
  userId BigInt
  orgId BigInt
  appId BigInt
  readOnly Boolean @default(false)
  active Boolean @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orgApps OrganizationApps @relation(fields: [orgId, appId], references: [orgId, appId])
  user User @relation(fields: [userId], references: [id])

  @@id([userId, orgId, appId])
}


model InviteUser {
  id        BigInt   @id @default(autoincrement())
  token     String   @unique
  orgId     BigInt
  roleId      BigInt
  email     String
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  org Organization @relation(fields: [orgId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
}

