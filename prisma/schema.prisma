// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        BigInt   @id @default(autoincrement())
  name      String
  // nif       String    @unique
  email     String    
  phone     String
  services  OrganizationService[]
  users  UserOrganizationRole[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  users UserOrgRoles[]
  apps  OrganizationApps[]
  invites InviteUser[]
}


model App {
  id        BigInt   @id @default(autoincrement())
  name      String
  description String
  image    String
  internal  Boolean   @default(true)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orgs  OrganizationApps[]
}

model OrganizationApps {
  orgId BigInt
  appId BigInt
  active Boolean @default(true)
  dbName String
  dbUser String
  dbPassword String
  slUrl String
  slSessionId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  org Organization @relation(fields: [orgId], references: [id])
  app App @relation(fields: [appId], references: [id])
  users UserOrgApps[]

  @@id([orgId, appId])
}

model Mantainers {
  id        BigInt   @id @default(autoincrement())
  name      String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id        BigInt   @id @default(autoincrement())
  email     String    @unique
  name      String?   
  password  String
  is_admin  Boolean   @default(false)
  organizations  UserOrganizationRole[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserOrganizationRole {
  user User @relation(fields: [user_id], references: [id])
  user_id String
  organization Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  role Role @relation(fields: [role_id], references: [id])
  role_id String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@id([user_id, organization_id, role_id])
}



model Role{
  id        String    @id @default(uuid())
  name      String    @unique
  permissions Permission[]
  users UserOrganizationRole[]
  description String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  org Organization @relation(fields: [orgId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
}

model Permission{
  id        String    @id @default(uuid())
  name      String    @unique
  roles Role[]
  description String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
